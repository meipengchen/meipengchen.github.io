<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>菜鸟学编程（第一天）函数及模块使用</title>
      <link href="/2020/01/20/my-new-post/"/>
      <url>/2020/01/20/my-new-post/</url>
      
        <content type="html"><![CDATA[<p>在未使用函数模块之前，如果需要进行阶乘的运算，我们需要像下面这样：</p><pre class=" language-python"><code class="language-python">m <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">"请输入一个数："</span><span class="token punctuation">)</span><span class="token punctuation">)</span>fm <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">for</span> num <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      fm<span class="token operator">*=</span>num<span class="token keyword">print</span><span class="token punctuation">(</span>fm<span class="token punctuation">)</span></code></pre><p>当进行多项阶乘运算的时候代码中的重复部分会造成代码冗长：</p><pre class=" language-python"><code class="language-python">m<span class="token operator">=</span>int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'m = '</span><span class="token punctuation">)</span><span class="token punctuation">)</span>n<span class="token operator">=</span>int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'n = '</span><span class="token punctuation">)</span><span class="token punctuation">)</span>z<span class="token operator">=</span>int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'z= '</span><span class="token punctuation">)</span><span class="token punctuation">)</span>fm <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">for</span> num <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    fm <span class="token operator">*=</span> numfn <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">for</span> num <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    fn <span class="token operator">*=</span> numfz <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">for</span> num <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> z <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    fz <span class="token operator">*=</span> num<span class="token keyword">print</span><span class="token punctuation">(</span>fm <span class="token operator">//</span> fn <span class="token operator">//</span> fz<span class="token punctuation">)</span></code></pre><p>所以我们需要封装一个函数模块，在阶乘计算的时候调用它，代码会变得相对简洁：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> math <span class="token keyword">import</span> factorialm<span class="token operator">=</span>int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'m=：'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>n<span class="token operator">=</span>int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'n=：'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>z<span class="token operator">=</span>int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'z=：'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>factorial<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token operator">//</span>factorial<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token operator">//</span>factorial<span class="token punctuation">(</span>z<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>函数的定义使用def来进行定义，其命名规则与变量一致，在函数名后面的圆括号内是传递参数，相当于数学中的自变量，运行完之后通过return返回一个值，相当于数学中的因变量python中的函数参数可以有默认参数，也可以设置成可变参数，所以python不需要像其他语言一样支持重载，如以下这个例子：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">power_7</span><span class="token punctuation">(</span>m<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    fm<span class="token operator">=</span><span class="token number">1</span>    <span class="token keyword">for</span> num <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        fm<span class="token operator">*=</span>num    <span class="token keyword">return</span> fm<span class="token keyword">print</span><span class="token punctuation">(</span>power_7<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#无指定参数就是默认值输出3!</span><span class="token keyword">print</span><span class="token punctuation">(</span>power_7<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>在实际中，一个函数的参数个数我们是无法确定的，这时候可以用可变参数的方式对函数进行定义：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">add_7</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true">#在参数名前打一个*表示其是可变参数</span>    <span class="token keyword">for</span> num <span class="token keyword">in</span> args<span class="token punctuation">:</span>        total<span class="token operator">+=</span>num    <span class="token keyword">return</span> total<span class="token keyword">print</span><span class="token punctuation">(</span>add_7<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>add_7<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>add_7<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="用模块管理函数"><a href="#用模块管理函数" class="headerlink" title="用模块管理函数"></a>用模块管理函数</h3><p>在同一个.py文件中可能定义了相同名字的函数造成冲突，这时候需要模块来管理函数。python中每个文件是一个模块，不同的模块允许有同名函数：</p><p>module1.py</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">seven_7</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'hello world'</span><span class="token punctuation">)</span></code></pre><p>module2.py</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">seven_7</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'goodbye world'</span><span class="token punctuation">)</span></code></pre><p>test.py</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> module1 <span class="token keyword">as</span> m1<span class="token keyword">import</span> module2 <span class="token keyword">as</span> m2<span class="token keyword">print</span><span class="token punctuation">(</span>m1<span class="token punctuation">.</span>seven_7<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m2<span class="token punctuation">.</span>seven_7<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>在模块当中可能还含有其他可执行的代码，在导入该模块时会执行，我们需要如下配置条件来避免这种情况：</p><p>module3.py</p><pre><code>def foo():    passdef bar():    pass# __name__是Python中一个隐含的变量它代表了模块的名字# 只有被Python解释器直接执行的模块的名字才是__main__if __name__ == &#39;__main__&#39;:    print(&#39;call foo()&#39;)    foo()    print(&#39;call bar()&#39;)    bar()</code></pre><p>这样的话除非直接运行该模块，不然if条件下的语句不会被执行到。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/01/14/hello-world/"/>
      <url>/2020/01/14/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
